var documenterSearchIndex = {"docs":
[{"location":"api/#Functions","page":"Other Functions","title":"Functions","text":"","category":"section"},{"location":"api/#OrderedBeta()","page":"Other Functions","title":"OrderedBeta()","text":"","category":"section"},{"location":"api/","page":"Other Functions","title":"Other Functions","text":"OrderedBeta","category":"page"},{"location":"api/#SubjectiveScalesModels.OrderedBeta","page":"Other Functions","title":"SubjectiveScalesModels.OrderedBeta","text":"OrderedBeta(μ, ϕ, k1, k2)\n\nThe distribution is defined on the interval [0, 1] with additional point masses at 0 and 1. It is defined as a mixture of a Beta Phi2 distribution and two point masses at 0 and 1.\n\nParameters\n\nμ: location parameter ]0, 1[\nϕ: precision parameter (must be positive)\nk1: first cutpoint\nk2: Difference between the second and first cutpoints\n\nExamples\n\njulia> OrderedBeta(0.5, 1)\nOrderedBeta{Float64}(\nμ: 0.5\nϕ: 1.0\nk1: -6.0\nk2: 12.0\nbeta_dist: Distributions.Beta{Float64}(α=1.0, β=1.0)\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#ExtremeBeta()","page":"Other Functions","title":"ExtremeBeta()","text":"","category":"section"},{"location":"api/","page":"Other Functions","title":"Other Functions","text":"ExtremeBeta","category":"page"},{"location":"api/#SubjectiveScalesModels.ExtremeBeta","page":"Other Functions","title":"SubjectiveScalesModels.ExtremeBeta","text":"ExtremeBeta(μ, ϕ, k0, k1)\n\nThis is a modified version of the OrderedBeta model by Kubinec (2023).\n\nArguments\n\nμ: Location parameter (range: 0 1). See BetaPhi2.\nϕ: Precision parameter (must be  0). See BetaPhi2.\n\nDetails\n\n(Image: )\n\nExamples\n\njulia> ExtremeBeta()\nExtremeBeta{Float64}(\nμ: 0.5\nϕ: 1.0\nk0: 0.0\nk1: 0.0\nbeta_dist: Distributions.Beta{Float64}(α=1.0, β=1.0)\n)\n\n\n\n\n\n","category":"type"},{"location":"api/#Other","page":"Other Functions","title":"Other","text":"","category":"section"},{"location":"api/#data_rescale()","page":"Other Functions","title":"data_rescale()","text":"","category":"section"},{"location":"api/","page":"Other Functions","title":"Other Functions","text":"data_rescale(x::Vector{T}; old_range::Vector{T}=[minimum(x), maximum(x)], new_range::Vector{T}=[0, 1]) where {T<:Number}","category":"page"},{"location":"api/#SubjectiveScalesModels.data_rescale-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Number","page":"Other Functions","title":"SubjectiveScalesModels.data_rescale","text":"data_rescale(x; old_range=[minimum(x), maximum(x)], new_range=[0, 1])\n\nRescale a variable to a new range. Can be used to normalize a variable between 0 and 1.\n\ndanger: Danger\nThis function is currently used internally and might be moved to another package. Avoid using it directly.\n\nArguments\n\nx: Vector to rescale.\nold_range: Old range of the vector to rescale (will be taken by default from the minimum and maximum value of x).\nnew_range: Range to rescale x to. By default, [0-1].\n\nExamples\n\njulia> data_rescale([1, 2, 3])\n3-element Vector{Float64}:\n 0.0\n 0.5\n 1.0\n\njulia> data_rescale([1, 2, 3]; old_range=[1, 6], new_range=[1, 0])\n3-element Vector{Float64}:\n 1.0\n 0.8\n 0.6\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"Other Functions","title":"Other Functions","text":"SubjectiveScalesModels","category":"page"},{"location":"api/#SubjectiveScalesModels","page":"Other Functions","title":"SubjectiveScalesModels","text":"SubjectiveScalesModels\n\n\n\n\n\n","category":"module"},{"location":"BetaPhi2/#BetaPhi2()-for-Beta-Regressions","page":"BetaPhi2","title":"BetaPhi2() for Beta Regressions","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Regression models with a Beta distribution can be useful to predict scores from bounded variables (that has an upper and lower limit), such as that of scales.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"The SubjectiveScalesModels.jl package defines the the BetaPhi2() function that can be used to generate or model this type of data.","category":"page"},{"location":"BetaPhi2/#Function","page":"BetaPhi2","title":"Function","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"BetaPhi2","category":"page"},{"location":"BetaPhi2/#SubjectiveScalesModels.BetaPhi2","page":"BetaPhi2","title":"SubjectiveScalesModels.BetaPhi2","text":"BetaPhi2(μ, ϕ)\n\nConstruct a Beta distribution with parameters mean μ and precision ϕ. It is defined as Beta(μ * 2ϕ, (1 - μ) * 2ϕ).\n\nArguments\n\nμ: Location parameter (range: 0 1).\nϕ: Precision parameter (must be  0).\n\nDetails\n\nBeta Phi2 is a variant of the traditional Mu-Phi location-precision parametrization.  The modification - scaling ϕ by a factor of 1/2 - creates in a Beta distribution in which, when μ is at its center (i.e., 0.5), a parameter ϕ equal to 1 results in a flat prior (i.e., Beta(1 1)). It is useful to set priors for ϕ on the log scale in regression models, so that a prior of Normal(0 1) assigns the most probability on a flat distribution (ϕ=1).\n\n(Image: )\n\nThe red area shows the region where the distribution assigns the highest probability to extreme values (towards 0 and/or 1). The blue area shows the region where the distribution is \"convex\" and peaks within the 0 1 interval.\n\nExamples\n\njulia> BetaPhi2(0.5, 1)\nBetaPhi2{Float64}(μ=0.5, ϕ=1.0)\n\n\n\n\n\n","category":"type"},{"location":"BetaPhi2/#Usage","page":"BetaPhi2","title":"Usage","text":"","category":"section"},{"location":"BetaPhi2/#Simulate-Data","page":"BetaPhi2","title":"Simulate Data","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"tip: Summary\nYou can use rand(dist, n) to generate n observations from a BetaPhi2() distribution.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Let's generate some data from a BetaPhi2() distribution with known parameters that we are going to try to recover using Bayesian modelling.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"using DataFrames\nusing Random\nusing Turing\nusing CairoMakie\nusing StatsFuns: logistic\nusing SubjectiveScalesModels","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Random.seed!(123)\n\ny = rand(BetaPhi2(μ=0.7, ϕ=3.0), 1000)\n\nhist(y, bins=100, color=:dodgerblue, normalization=:pdf)","category":"page"},{"location":"BetaPhi2/#Prior-Specification","page":"BetaPhi2","title":"Prior Specification","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"tip: Summary\nExpressing μ on the logit scale and ϕ on the log scale is recommended, with default priors as Normal(0 1).","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Expressing parameters on the logit scale for μ and the log scale for ϕ can be useful to define priors that are more interpretable and easier to specify (and to avoid computational issues caused by the bounded nature of the parameters).","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"<details><summary>See code</summary>","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"μ = Normal(0, 1.0)\nϕ = Normal(0, 1.0)\n\nfig =  Figure(size = (850, 600))\n\nax1 = Axis(fig[1, 1], \n    xlabel=\"Prior on the logit scale\",\n    ylabel=\"Prior on μ\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\n\nxaxis1 = range(-10, 10, 1000)\n\nlines!(ax1, xaxis1, pdf.(μ, xaxis1), color=:purple, linewidth=2, label=\"μ ~ Normal(0, 1)\")\naxislegend(ax1; position=:rt)\n\nax2 = Axis(fig[1, 2], \n    xlabel=\"Prior after logistic transformation\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax2, logistic.(xaxis1), pdf.(μ, xaxis1), color=:purple, linewidth=2, label=\"μ\")\n\nax3 = Axis(fig[2, 1], \n    xlabel=\"Prior on the log scale\",\n    ylabel=\"Prior on ϕ\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax3, xaxis1, pdf.(ϕ, xaxis1), color=:green, linewidth=2, label=\"ϕ ~ Normal(0, 1)\")\naxislegend(ax3; position=:rt)\n\nax4 = Axis(fig[2, 2], \n    xlabel=\"Prior after exponential transformation\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nvlines!(ax4, [1], color=:black, linestyle=:dash, linewidth=1)\nlines!(ax4, exp.(xaxis1), pdf.(ϕ, xaxis1), color=:green, linewidth=2, label=\"ϕ\")\nxlims!(ax4, -0.5, 15)\n\nfig[0, :] = Label(fig, \"Priors for Beta Regressions\", fontsize=20, color=:black, font=:bold)\nfig;","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"</details>","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"fig  # hide","category":"page"},{"location":"BetaPhi2/#Bayesian-Model-with-Turing","page":"BetaPhi2","title":"Bayesian Model with Turing","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"We can easily use this distribution to fit a Beta regression model using the Turing package.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"@model function model_beta(y)\n    # Priors\n    μ ~ Normal(0, 1)\n    ϕ ~ Normal(0, 1)\n\n    # Inference\n    for i in 1:length(y)\n        y[i] ~ BetaPhi2(logistic(μ), exp(ϕ))\n    end\nend\n\nfit = model_beta(y)\nposteriors = sample(fit, NUTS(), 500)\n\n# 95% CI\nhpd(posteriors)","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Let us do a Posterior Predictive Check which involves the generation of predictions from the model to compare the predicted distribution against the actual observed data.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"# Make predictions\npred = predict(model_beta([missing for _ in 1:length(y)]), posteriors)\npred = Array(pred)\n\nfig = hist(y, bins=100, color=:dodgerblue, normalization=:pdf)\nfor i in 1:size(pred, 1) # Iterate over each draw\n    density!(pred[i, :], color=(:black, 0), strokecolor=(:crimson, 0.05), strokewidth=3)\nend\nxlims!(0, 1)\nfig","category":"page"},{"location":"BetaPhi2/#Recover-Parameters","page":"BetaPhi2","title":"Recover Parameters","text":"","category":"section"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"tip: Summary\nUse the logistic() (in the StatsFuns package) and exp() functions to transform the model parameters back to the original scale.","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Let us compare the parameters estimated by the model (the mean of the posteriors) with the true values used to generate the data (μ=0.7, ϕ=3.0).","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"means = DataFrame(mean(posteriors))\n\ntable = DataFrame(\n    Parameter = means.parameters,\n    PosteriorMean = means.mean,\n    Estimate = [logistic(means.mean[1]), exp(means.mean[2])],\n    TrueValue = [0.7, 3.0]\n)","category":"page"},{"location":"BetaPhi2/","page":"BetaPhi2","title":"BetaPhi2","text":"Mission accomplished! ","category":"page"},{"location":"Choco/#Choco-Model","page":"Choco","title":"Choco Model","text":"","category":"section"},{"location":"Choco/","page":"Choco","title":"Choco","text":"A Choice-Confidence scale is a subjective scale in which the left and right halves can be conceptualized as two different choices (e.g., True/False, Agree/Disagree, etc.), and the magnitude of the response (how much the cursor is placed towards he extremes) as the confidence in the corresponding choice.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"This type of data can be modeled using a mixture of two scaled Beta distributions expressing the confidence for each choice, each choice occurring with a certain probability.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"The SubjectiveScalesModels.jl package defines the the Choco() function that can be used to generate or model data from choice-confidence scales.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"Choco","category":"page"},{"location":"Choco/#SubjectiveScalesModels.Choco","page":"Choco","title":"SubjectiveScalesModels.Choco","text":"Choco(p0, μ0, ϕ0, μ1, ϕ1)\n\nConstruct a Choice-Confidence (Choco) model distribution.\n\nExamples\n\njulia> Choco(p0=0.5, μ0=0.7, ϕ0=2, μ1=0.7, ϕ1=2)\nMixtureModel{Distributions.LocationScale{Float64, Distributions.Continuous, Distributions.Beta{Float64}}}(K = 2)\ncomponents[1] (prior = 0.5000): Distributions.LocationScale{Float64, Distributions.Continuous, Distributions.Beta{Float64}}(\nμ: 0.5\nσ: -0.5\nρ: Distributions.Beta{Float64}(α=2.8, β=1.2000000000000002)\n)\n\ncomponents[2] (prior = 0.5000): Distributions.LocationScale{Float64, Distributions.Continuous, Distributions.Beta{Float64}}(\nμ: 0.5\nσ: 0.5\nρ: Distributions.Beta{Float64}(α=2.8, β=1.2000000000000002)\n)\n\n\n\n\n\n","category":"function"},{"location":"Choco/#Demonstration","page":"Choco","title":"Demonstration","text":"","category":"section"},{"location":"Choco/#Generate-Data","page":"Choco","title":"Generate Data","text":"","category":"section"},{"location":"Choco/","page":"Choco","title":"Choco","text":"Let's generate some data from a Choco() distribution with known parameters that we are going to try to recover using Bayesian modelling.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"using DataFrames\nusing Random\nusing Turing\nusing CairoMakie\nusing StatsFuns: logistic\nusing SubjectiveScalesModels","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"Random.seed!(123)\n\ny = rand(Choco(p0=0.3, μ0=0.7, ϕ0=1, μ1=0.3, ϕ1=3.0), 1000)\n\nhist(y, bins=100, color=:darkred)","category":"page"},{"location":"Choco/#Decide-on-Priors","page":"Choco","title":"Decide on Priors","text":"","category":"section"},{"location":"Choco/","page":"Choco","title":"Choco","text":"Deciding on priors requires a good understanding of the meaning of the parameters of the BetaPhi2 distribution on which the Choco model is based.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"The parameters of the Choco() distribution have the following requirements:","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"p0, μ0 and μ1: Must be in the interval 0-1.\nϕ0 and ϕ1: Must be positive (with a special value at 1 where the distribution is flat when μ is at 0.5).","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"Because of these specificities, it this convenient to express priors on a different scale (the logit scale for p0, μ0 and μ1, and the log scale for ϕ0 and ϕ1) and then transform them using a logistic or exponential link functions.","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"<details><summary>See code</summary>","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"fig =  Figure(size = (1000, 700))\nax1 = Axis(fig[1, 1], \n    xlabel=\"Prior on the logit scale\",\n    ylabel=\"Distribution\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\n\np0 =  Normal(0, 3)\nμ0 = Normal(0, 1.5)\nμ1 = Normal(0, 1.0)\nϕ0 = Normal(0, 1.0)\nϕ1 = Normal(0, 0.8)\n\nxaxis1 = range(-10, 10, 1000)\n\nlines!(ax1, xaxis1, pdf.(p0, xaxis1), color=:purple, linewidth=2, label=\"p0 ~ Normal(0, 3)\")\naxislegend(ax1; position=:rt)\n\nax2 = Axis(fig[1, 2], \n    xlabel=\"Prior after logistic transformation\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax2, logistic.(xaxis1), pdf.(p0, xaxis1), color=:purple, linewidth=2, label=\"p0\")\n\nax3 = Axis(fig[2, 1], \n    xlabel=\"Prior on the logit scale\",\n    ylabel=\"Distribution\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax3, xaxis1, pdf.(μ0, xaxis1), color=:blue, linewidth=2, label=\"μ0 ~ Normal(0, 1.5)\")\nlines!(ax3, xaxis1, pdf.(μ1, xaxis1), color=:red, linewidth=2, label=\"μ1 ~ Normal(0, 1.0)\")\naxislegend(ax3; position=:rt)\n\nax4 = Axis(fig[2, 2], \n    xlabel=\"Prior after logistic transformation\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax4, logistic.(xaxis1), pdf.(μ0, xaxis1), color=:blue, linewidth=2, label=\"μ0\")\nlines!(ax4, logistic.(xaxis1), pdf.(μ1, xaxis1), color=:red, linewidth=2, label=\"μ1\")\n\nax5 = Axis(fig[3, 1], \n    xlabel=\"Prior on the log scale\",\n    ylabel=\"Distribution\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nlines!(ax5, xaxis1, pdf.(ϕ0, xaxis1), color=:green, linewidth=2, label=\"ϕ0 ~ Normal(0, 1)\")\nlines!(ax5, xaxis1, pdf.(ϕ1, xaxis1), color=:orange, linewidth=2, label=\"ϕ1 ~ Normal(0, 0.8)\")\naxislegend(ax5; position=:rt)\n\nax6 = Axis(fig[3, 2], \n    xlabel=\"Prior after exponential transformation\",\n    yticksvisible=false,\n    xticksvisible=false,\n    yticklabelsvisible=false)\nvlines!(ax6, [1], color=:black, linestyle=:dash, linewidth=1)\nlines!(ax6, exp.(xaxis1), pdf.(ϕ0, xaxis1), color=:green, linewidth=2, label=\"ϕ0\")\nlines!(ax6, exp.(xaxis1), pdf.(ϕ1, xaxis1), color=:orange, linewidth=2, label=\"ϕ1\")\nxlims!(ax6, 0, 10);","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"</details>","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"fig  # hide","category":"page"},{"location":"Choco/#Specify-Turing-Model","page":"Choco","title":"Specify Turing Model","text":"","category":"section"},{"location":"Choco/","page":"Choco","title":"Choco","text":"@model function model_choco(y)\n    p0 ~ Normal(0, 3)\n    μ0 ~ truncated(Normal(0, 1.5), -10, 10)\n    μ1 ~ truncated(Normal(0, 1.0), -10, 10)\n    ϕ0 ~ Normal(0, 1)\n    ϕ1 ~ Normal(0, 0.8)\n\n    for i in 1:length(y)\n        y[i] ~ Choco(logistic(p0), logistic(μ0), exp(ϕ0), logistic(μ1), exp(ϕ1))\n    end\nend\n\nfit = model_choco(y)\nposteriors = sample(fit, NUTS(), 500);","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"tip: Tip\nIt can be useful to truncate the priors for mu to avoid the model to explore regions to close to the boundaries 0 and 1 (after transformation), as it might lead to convergence errors","category":"page"},{"location":"Choco/","page":"Choco","title":"Choco","text":"posterior_mean = DataFrame(mean(posteriors))\n\n# Format\nresults = DataFrame(\n    Parameter = posterior_mean.parameters,\n    Posterior_Mean = round.(posterior_mean.mean; digits=2),\n    Estimate = round.([\n        logistic(posterior_mean.mean[1]), \n        logistic(posterior_mean.mean[2]),\n        logistic(posterior_mean.mean[3]),\n        exp(posterior_mean.mean[4]),\n        exp(posterior_mean.mean[5])\n        ]; digits=2),\n    Truth = [0.3, 0.7, 1, 0.3, 3]\n)\n\nresults","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SubjectiveScalesModels","category":"page"},{"location":"#SubjectiveScalesModels","page":"Home","title":"SubjectiveScalesModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Toolbox for modelling scores from subjective scales (Likert scales, analog scales, ...).  This package's functions are demonstrated in the Cognitive Models book.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Table-of-Content","page":"Home","title":"Table of Content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
